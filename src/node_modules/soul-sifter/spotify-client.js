import { AlertsMixin } from "./mixin-alerts.js";

class SpotifyClient extends AlertsMixin(Object) {  // TODO show errors

  constructor() {
    super();

    this.client_id = '557db31544664187ae1be4279d233166';
    this.redirect_uri = 'http://localhost:8888';
    this.logged_in = false;
    this.access_token = null;

    this.express = require('express'); // Express web server framework
  }

  _authorize() {
    // set up auth listener
    let app = this.express();
    app.get('/', (req, res) => { res.send('o hai') });
    console.log('Listening on 8888');
    this.server = app.listen(8888);

    // implicit grant flow
    let scope = 'user-read-private user-read-email';

    // generate random string
    this.state = '';
    let possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    for (var i = 0; i < 16; i++) {
      this.state += possible.charAt(Math.floor(Math.random() * possible.length));
    }

    let url = 'https://accounts.spotify.com/authorize';
    url += '?response_type=token';
    url += '&client_id=' + encodeURIComponent(this.client_id);
    url += '&scope=' + encodeURIComponent(scope);
    url += '&redirect_uri=' + encodeURIComponent(this.redirect_uri);
    url += '&state=' + encodeURIComponent(this.state);

    var out = {};
    nw.Window.open(url, {}, (win) => {
      // getHashParams
      let hashParams = {};
      let e, r = /([^&;=]+)=?([^&;]*)/g,
          q = win.window.location.hash.substring(1);
      while (e = r.exec(q)) {
         hashParams[e[1]] = decodeURIComponent(e[2]);
      }

      let access_token = hashParams.access_token,
          state = hashParams.state;
      if (access_token && (state == null || state !== this.state)) {
        alert('There was an error during the authentication');
      } else {
        if (access_token) {
          window.console.log('logged in!');
          this.access_token = access_token;
        } else {
          window.console.warn('not logged in');
        }
      }
      // shutdown everything
      this.server.close();
      this.server = null;
      win.window.close();
    });
  }

  /**
   * Add a new playlist, save the playlist id, and add the songs.
   */
  async createPlaylist(playlistId) {
    let playlist = ss.Playlist.findById(playlistId);
    try {
      let response = await this._createPlaylist(playlist);
      console.info('Successfully created YouTube playlist ' + playlist.name);
      playlist.youtubeId = response.data.id;
      playlist.update();
    } catch (err) {
      this.addAlert('Unable to create YouTube playlist ' + playlist.name);
      console.error(err);
      return;
    }
    try {
      if (!!playlist.query) {
        let songs = ss.SearchUtil.searchSongs(playlist.query, 0, '', playlist.styles, [], 200, 0, false, 0,
            (msg) => { this.addAlert(msg, 5); });
        for (let i = 0; i < songs.length; ++i) {
          await this._addSongToPlaylist(songs[i], playlist);
        }
      }
    } catch (err) {
      this.addAlert('Unable to add song to YouTube playlist ' + playlist.name);
      console.error(err);
      return;
    }
  }
};

if (!window.spotify) window.spotify = new SpotifyClient();
