import { css, html, LitElement } from "@polymer/lit-element";

import "@polymer/paper-input/paper-input.js";

import "./icon-button.js";
import "./options-menu.js";
import "./options-menu-item.js";
import "./pitch-slider.js";
import "./star-rating.js";
import { SettingsMixin } from "./mixin-settings.js";
import { SongMixin } from "./mixin-song.js";


class SongSection extends SettingsMixin(SongMixin(LitElement)) {
  render() {
    let localeDateTime = !!this.song ? new Date(this.song.dateAdded).toLocaleString() : '';
    return html`
      <div id="nav" draggable="true" @dragstart="${this.dragSong}">
        <icon-button @click="${this.backAction}" ?disabled="${!this.songTrail.length}">arrow_back</paper-icon-button>
        <icon-button @click="${this.forwardAction}" ?disabled="${!this.songTrailCache.length}">arrow_forward</paper-icon-button>
      </div>
      <div class="content">
        <div class="title">${this.song.title}</div>
        <div class="artist">${this.song.artist}</div>
        <star-rating value="${this.song.rating}" readonly></star-rating>
        <div class="track self-end">${this.song.album.track}</div>
        <div class="track self-end">${this.song.album.name}</div>
        <div class="released self-end"><span>${this.song.album.releaseDateYear}</span>-<span>${this.song.album.releaseDateMonth}</span>-<span>${this.song.album.releaseDateDay}</span></div>
        <div class="comments">${this.song.comments}</div>
        <div class="bpm">${this.song.bpm} bpm</div>
        <time class="added">${localeDateTime}</time>
        <div class="slider">
          <div>pitch</div>
          <pitch-slider></pitch-slider>
        </div>
        <div class="audio">
          <ss-audio id="audio" .song="${this.song}"></ss-audio>
        </div>
        <div id="musicVideoThumbnail" draggable="true" @dragstart="${this.dragMusicVideo}" ?hide="${!this.mv}"></div>
        <div id="musicVideoInput" ?hide="${!!this.mv}">
          <paper-input label="video id" value="${this.videoId}" no-label-float></paper-input>
          <icon-button @click="${this.associateVideo}">av:movie</paper-icon-button>
        </div>
        <options-menu class="self-end">
          <options-menu-item @click="${this.openEditSongPage}">Edit song</options-menu-item>
        </options-menu>
      </div>
    `;
  }

  static get properties() {
    return {
      songTrail: { type: Array },
      songTrailCache: { type: Array },
      // do not clear the cache when the songtrail is changed using the fwd or back btns
      clearCache: { type: Boolean },
      musicVideo: { type: Object },
      videoId: { type: String },
    }
  }

  constructor() {
    super();
    this.fs = require('fs');
    this.videoId = '';
    this.songTrail = [];
    this.songTrailCache = [];
    this.clearCache = true;
    this.saveSongTrailListener = this.saveSongTrail;
    this.song = new ss.Song();
    this.song.album = new ss.Album();
  }

  connectedCallback() {
    super.connectedCallback();
    window.addEventListener('save-song-trail', this.saveSongTrailListener);
  }

  disconnectedCallback() {
    window.removeEventListener('save-song-trail', this.saveSongTrailListener);
    super.disconnectedCallback();
  }

  songChanged(song) {
    this.song = song;
    // TODO this.$.audio.pause();
    if (!song) {
      this.setCoverImage();
      this.setMusicVideo();
      return;
    }
    let entry = new ss.PlaylistEntry();
    entry.song = song;
    entry.position = this.songTrail.length;
    this.songTrail.push(entry);
    this.videoId = '';
    if (this.clearCache) this.songTrailCache = [];
    else this.clearCache = true;
    this.setCoverImage(this.settings.getString('music.dir') + this.song.album.coverFilepath);
    this.setMusicVideo(ss.MusicVideo.findBySongId(this.song.id));
  }

  dragSong(e) {
    e.dataTransfer.effectAllowed = 'move';
    e.dataTransfer.setData('text/plain', 'extensis-filenames-type:' + this.settings.getString('music.dir') + this.song.filepath);
  }

  backAction(e) {
    let entry = this.songTrail.pop();
    if (!!entry) {
      this.songTrailCache.push(entry);
    }
    this.clearCache = false;
    if (this.songTrail.length) {
      // This gets added back to the song trail with songChanged method above
      this.changeSong(this.songTrail.pop().song);
    } else {
      this.changeSong(undefined);
    }
  }

  forwardAction(e) {
    this.clearCache = false;
    this.changeSong(this.songTrailCache.pop().song);
  }

  saveSongTrail(e) {
    let playlist = e.detail;
    for (let i = 0; i < this.songTrail.length; ++i) {
      let entry = this.songTrail[i];
      entry.playlist = playlist;
      entry.save();
    }
  }

  setCoverImage(img) {
    let url = '';
    if (!!img) {
      url = 'url("file://' + img + '")';
    }
    this.shadowRoot.getElementById('nav').style.backgroundImage = url;
  }

  setMusicVideo(mv) {
    this.musicVideo = mv;
    var url = '';
    if (!!mv && !!mv.thumbnailFilePath) {
      url = 'url("file://' + this.settings.getString('mv.dir') + mv.thumbnailFilePath + '")';
    }
    this.shadowRoot.getElementById('musicVideoThumbnail').style.backgroundImage = url;
  }

  associateVideo() {
    if (!this.song) return;
    this.setMusicVideo(ss.MusicVideoService.associateYouTubeVideo(this.song, this.videoId));
  }

  dragMusicVideo(e) {
    e.dataTransfer.effectAllowed = 'move';
    e.dataTransfer.setData('text/plain', 'extensis-filenames-type:' + this.settings.getString('mv.dir') + this.musicVideo.filePath);
  }

  openEditSongPage(e) {
    let event = new CustomEvent('song-edit', { detail: this.song });
    window.dispatchEvent(event);
  }

  static get styles() {
    return [
      css`
        :host {
          padding: 0 0 20px 0;
          height: 100%;
          overflow-x: hidden;
          overflow-y: scroll;
        }
        #nav {
          height: 256px;
          display: flex;
          flex-direction: row;
          background-color: transparent;
          background-size: cover;
          background-position: center;
        }
        #nav paper-icon-button[disabled] {
          visibility: hidden;
        }
        .hide {
          display: none;
        }

        
        .content {
          margin: 10px 15px;
          display: flex;
          flex-direction: column;
        }
        .title {
          color: var(--secondary-text-color);
        }
        .slider {
          display: flex;
          flex-direction: row;
          align-items: center;
        }
        pitch-slider {
          margin-left: 16px;
        }
        .self-end {
          align-self: flex-end;
        }
        audio {
          height: 30px;
          width: 100%;
        }
        #musicVideoInput {
          display: flex;
          flex-direction: row;
        }
        #musicVideoInput[hide] {
          display: none;
        }
        #musicVideoThumbnail {
          width: 100%;
          height: 144px;
          background-size: cover;
        }
        #musicVideoThumbnail[hide] {
          display: none;
        }
      `
    ];
  }
}

window.customElements.define('song-section', SongSection);
