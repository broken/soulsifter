// <link href="../polymer/polymer.html" rel="import">

// <link href="../iron-flex-layout/iron-flex-layout.html" rel="import">
// <link href="../paper-checkbox/paper-checkbox.html" rel="import">
// <link href="../paper-dropdown-menu/paper-dropdown-menu.html" rel="import">
// <link href="../paper-input/paper-input.html" rel="import">
// <link href="../paper-item/paper-item.html" rel="import">
// <link href="../paper-menu/paper-menu.html" rel="import">

// <link href="abstract-action-page.html" rel="import">
// <link href="genre-list.html" rel="import">
// <link href="ss-audio.html" rel="import">
// <link href="ss-star-rating.html" rel="import">

import { css, html, LitElement } from "@polymer/lit-element";

import "@polymer/paper-input/paper-input.js";

import "./abstract-action-page.js";
import "./options-menu-item.js";
import "./options-menu-paper-input.js";


class SongEdit extends LitElement {
  render() {
    let basicGenreItems = this.basicGenreList.map(g => html`<options-menu-item>${g.name}</options-menu-item>`);
    return html`
      <abstract-action-page id="abstractActionPage" @cancel="${this.skip}" @accept="${this.save}">
        <div class="fields">
          <div class="prev">&nbsp;<span>${this.taggedSong.artist}</span></div>
          <paper-input label="Artist" value="${this.editedSong.artist}" required="true" floatingLabel></paper-input>
          <div class="prev">&nbsp;<span>${this.taggedSong.track}</span></div>
          <paper-input label="Track Num" value="${this.editedSong.track}" floatingLabel></paper-input>
          <div class="prev">&nbsp;<span>${this.taggedSong.title}</span></div>
          <paper-input label="Title" value="${this.editedSong.title}" required="true" floatingLabel></paper-input>
          <div class="prev">&nbsp;<span>${this.taggedSong.remixer}</span></div>
          <paper-input label="Remixer" value="${this.editedSong.remixer}" floatingLabel></paper-input>
          <paper-input label="Comments" value="${this.editedSong.comments}" floatingLabel></paper-input>
          <paper-input label="Curator" value="${this.editedSong.curator}" floatingLabel></paper-input>
          <div id="ratingContainer">
            <div class="label">Rating</div>
            <star-rating value="${this.editedSong.rating}"></star-rating>
          </div>
          <div class="prev">&nbsp;<span>${this.taggedSong.bpm}</span></div>
          <paper-input label="BPM" value="${this.editedSong.bpm}" floatingLabel></paper-input>
          <paper-input label="Key" value="${this.editedSong.tonicKey}" floatingLabel></paper-input>
          <div class="cols">
            <div class="rows">
              <paper-checkbox checked="${this.editedSong.lowQuality}">Low Quality</paper-checkbox>
              <paper-checkbox checked="${this.editedSong.album.mixed}">Mixed</paper-checkbox>
              <paper-checkbox checked="${this.editedSong.trashed}" disabled$="[[song.trashed]]">Trash</paper-checkbox>
            </div>
            <div id="cover" on-click="_changeCover"></div>
            <input style="display:none;" id="coverFileDialog" type="file" nwworkingdir="[[_pathOfSong(_editedSong.filepath)]]"/>
          </div>
        </div>
        <div class="fields">
          <div class="prev">&nbsp;<span>${this.taggedSong.album.artist}</span></div>
          <paper-input label="Album Artist" value="${this.editedSong.album.artist}" floatingLabel></paper-input>
          <div class="prev">&nbsp;<span>${this.taggedSong.album.name}</span></div>
          <paper-input label="Album Name" value="${this.editedSong.album.name}" required="true" floatingLabel></paper-input>
          <div class="prev">&nbsp;<span>${this.taggedSong.albumPart.pos}</span></div>
          <paper-input label="POS" value="${this.editedSong.albumPart.pos}" floatingLabel></paper-input>
          <div class="prev">&nbsp;<span>${this.taggedSong.albumPart.name}</span></div>
          <paper-input label="Subtitle" value="${this.editedSong.albumPart.name}" floatingLabel></paper-input>
          <div class="prev">&nbsp;<span>${this.taggedSong.album.label}</span></div>
          <paper-input label="Label" value="${this.editedSong.album.label}" floatingLabel></paper-input>
          <div class="prev">&nbsp;<span>${this.taggedSong.album.catalogId}</span></div>
          <paper-input label="Catalog ID" value="${this.editedSong.album.catalogId}" floatingLabel></paper-input>
          <options-menu-paper-input label="Artist Genre" value="${this.basicGenreName}" required>
            ${basicGenreItems}
          </options-menu-paper-input>
          <div class="prev">&nbsp;<span>${this.taggedSong.album.releaseDateYear}</span></div>
          <paper-input label="Release Year" value="${this.editedSong.album.releaseDateYear}" required="true" type="number" min="1600" max="2099" floatingLabel></paper-input>
          <div class="prev">&nbsp;<span>${this.taggedSong.album.releaseDateMonth}</span></div>
          <paper-input label="Release Month" value="${this.editedSong.album.releaseDateMonth}" type="number" min="0" max="12" floatingLabel></paper-input>
          <div class="prev">&nbsp;<span>${this.taggedSong.album.releaseDateDay}</span></div>
          <paper-input label="Release Day" value="${this.editedSong.album.releaseDateDay}" type="number" min="0" max="31" floatingLabel></paper-input>
        </div>
        <div class="genres">
          <genre-list id="genreList" .genres="${this.genres}" singleselect></genre-list>
        </div>
      </abstract-action-page>
      <div class="metadata">
        <div class="audio"><ss-audio id="audio" song="[[song]]"></ss-audio></div>
        <div>[[_editedSong.id]]</div>
        <div on-click="_changeSong">[[_editedSong.filepath]]</div>
        <input style="display:none;" id="songFileDialog" type="file" nwworkingdir="[[_pathOfSong(_editedSong.filepath)]]"/>
      </div>
    `;
  }

  static get properties() {
    return {
      song: { type: Object },
      taggedSong: { type: Object },
      editedSong: { type: Object },
      soulSifterSettings: { type: Object },
      newSongManager: { type: Object },
      albumArtistCompilation: { type: Boolean },
      changedAlbumCover: { type: Boolean },
      changedSongFile: { type: Boolean },
      genres: { type: Array },
      basicGenreList: { type: Array },
      basicGenreName: { type: String },

      
      filepaths: {
        type: Array,
        observer: '_filepathsChanged'
      },
    }
  }

  constructor() {
    super();
    this._openPageListener = (e) => {
      this.song = e.detail;
      this.songChanged();
      this.classList.add('show');
    };
    // Defaults
    this.soulSifterSettings = new ss.SoulSifterSettings();
    this.newSongManager = new ss.NewSongManager();
    this.albumArtistCompilation = false;
    this.changedAlbumCover = false;
    this.changedSongFile = false;
    this.genres = [];
    this.basicGenreList = ss.BasicGenre.findAll();
    // used for moving cover files
    this.fs = require('fs');
    this.path = require('path');
    // Dummy values for rendering
    this.taggedSong = new ss.Song();
    this.taggedSong.album = new ss.Album();
    this.taggedSong.albumPart = new ss.AlbumPart();
    this.editedSong = new ss.Song();
    this.editedSong.album = new ss.Album();
    this.editedSong.albumPart = new ss.AlbumPart();
  }

  connectedCallback() {
    super.connectedCallback();
    window.addEventListener('page-song-edit', this._openPageListener);
  }

  disconnectedCallback() {
    window.removeEventListener('page-song-edit', this._openPageListener);
    super.disconnectedCallback();
  }

  exit() {
    // TODO this.$.audio.pause();
    this.classList.remove('show');
  }
/*
    observers: [
      '_albumArtistChanged(_editedSong.album.artist)',
      '_artistChanged(_editedSong.artist)',
    ],

    attached() {
      Polymer.RenderStatus.afterNextRender(this, function() {
        this.$.abstractActionPage.setAcceptAction(this.save);
        this.$.abstractActionPage.setCancelAction(this.skip);
        // select file dialog
        var that = this;
        this.$.coverFileDialog.addEventListener("change", function(e) {
          that.$.cover.style.backgroundImage = 'url("file://' + this.value + '")';
          // TODO should move cover file in place
          that._editedSong.album.coverFilepath = that._editedSong.id ? this.value.replace(that._soulSifterSettings.getString('music.dir'), '') : this.value;
          that._changedAlbumCover = true;
        }, false);
        this.$.songFileDialog.addEventListener("change", function(e) {
          // TODO move song in place if out of place
          that._editedSong.filepath = that._editedSong.id ? this.value.replace(that._soulSifterSettings.getString('music.dir'), '') : this.value;
          that.notifyPath('_editedSong.filepath', that._editedSong.filepath);
          if (!!that._editedSong.id) that._changedSongFile = true;
        }, false);
      }.bind(this));
    }*/

  save() {
    if (!this.validate()) return;
    // perhaps allow genre list to select a set of IDs in the future?
    let styleIds = this.genres.map(function(g) { return g.id; });
    this.editedSong.styleIds = styleIds;
    // If there is no album part, we should clear this object out so it is
    // not saved. Setting the ID deletes the object, and having an ID of 0
    // indicates a NULL value upon save.
    if (!this.editedSong.albumPart.pos && !this.editedSong.albumPart.name) {
      this.editedSong.albumPartId = 0;
    } else {
      // make sure this albumPart's album matches this edited album
      if (!!this.editedSong.album.id) this.editedSong.albumPart.albumId = this.editedSong.album.id;
      else this.editedSong.albumPart.album = this.editedSong.album;
    }
    // Since basicGenre objects should not be shared between objects, we will be
    // creating another basicGenre here regardless if we selected an object in the dropdown.
    this.editedSong.album.basicGenre = ss.BasicGenre.findByName(this.basicGenreName);

    // Moves files after song change
    if (this.changedSongFile && !!this.editedSong.id) {
      // TODO the file moving should be done externally
      // remove current song (copied to /var/tmp)
      let currentSongFilepath = this.soulSifterSettings.getString('music.dir') + this.song.filepath;
      let albumFilepath = this.path.dirname(this.song.filepath);
      let rmToTmpFilename = '/var/tmp/' + this.path.basename(this.song.filepath);
      this.fs.rename(currentSongFilepath, rmToTmpFilename);
      window.console.log('Renamed ' + currentSongFilepath + ' to ' + rmToTmpFilename);
      // copy new file to current albumFilepaths location
      let basename = this.path.basename(this.editedSong.filepath);
      let newpath = this.soulSifterSettings.getString('music.dir') + albumFilepath + '/' + basename;
      this.fs.rename(this.editedSong.filepath, newpath);
      window.console.log('Renamed ' + this.editedSong.filepath + ' to ' + newpath);
      this.editedSong.filepath = albumFilepath + '/' + basename;
    }

    if (this.editedSong.id) {
      this.editedSong.update();
      // TODO update song with changes
    } else {
      this.newSongManager.processSong(this.editedSong);
      this.albumArtistCompilation = !this.editedSong.album.albumArtist;
      if (this.hasMoreSongs()) {
        // TODO this.$.audio.pause();
        return;  // stay on this page
      }
      this.albumArtistCompilation = false;
    }

    // Currently you cannot edit the cover of newly added songs. The
    // NewSongManager processes it last, so anything changed will just be
    // overwritten.
    if (this.changedAlbumCover) {
      // TODO the file moving should be done externally
      let basename = this.path.basename(this.editedSong.album.coverFilepath);
      let dirname = this.path.dirname(this.editedSong.filepath);
      let newpath = this.soulSifterSettings.getString('music.dir') + dirname + '/' + basename;
      this.fs.rename(this.editedSong.album.coverFilepath, newpath);
      this.editedSong.album.coverFilepath = dirname + '/' + basename;
      this.editedSong.album.update();
    }

    this.exit();
  }

  skip() {
    if (this.hasMoreSongs()) {
      return;  // stay on this page
    }
    this.albumArtistCompilation = false;
    this.exit();
  }

  songChanged() {
    if (!this.song) return;
    this.editedSong = new ss.Song(this.song);
    // Create album & album part for the song we are editing if there
    // currently does not exist one. It is not needed for the tagged song
    // since its purpose is only output.
    if (!this.editedSong.album) this.editedSong.album = new ss.Album();
    if (!this.editedSong.albumPart) {
      this.editedSong.albumPart = new ss.AlbumPart();
      this.editedSong.albumPart.album = this.editedSong.album;
    }
    if (!!this.editedSong.album.basicGenre) this.basicGenreName = this.editedSong.album.basicGenre.name;
    else this.basicGenreName = '';
    this.shadowRoot.getElementById('cover').style.backgroundImage = 'url("file://' + this.soulSifterSettings.getString('music.dir') + this.editedSong.album.coverFilepath + '")';
    this.changedAlbumCover = false;
    this.changedSongFile = false;
    // this does not seem to play well when working straight on the array object
    this.genres = this.editedSong.styles;
  }

  filepathsChanged() {
    this.newSongManager.import(this.filepaths);
    if (!this.hasMoreSongs()) {
      // for some reason there is no song after importing filepaths, so just exit.
      this.exit();
    }
  }

  hasMoreSongs() {
    // There is an issue to update the data bindings of the songs updated
    // from the nextSong call on NewSongManager. Because of the dirty
    // checking in notifyPath, and the internals of the object are updated
    // via a 3rd-party library, we cannot update the bindings.
    // There are two options:
    // 1. Create temporary song objects to get updated, then set the bound
    // objects to these values.
    // 2. Call _pathEffector which is the "private" method in polymer which
    // does the update calls of notifyPath without the dirty checking.
    // Going with option 1 for now. Even though it is creating extra objects,
    // it's relatively small, and we could make them private members ourself
    // if we care about memory that much. It should be better than being
    // bitten by using a method that is considered private and updated from
    // underneath us.
    let tmpSong = new ss.Song();
    let tmpTaggedSong = new ss.Song();
    if (this.newSongManager.nextSong(tmpSong, tmpTaggedSong)) {
      this.taggedSong = tmpTaggedSong;
      this.song = tmpSong;
      return true;
    }
    return false;
  }

  validate() {
    let valid = true;
    let inputs = this.shadowRoot.querySelectorAll('paper-input');
    for (let i = 0; i < inputs.length; ++i) {
      valid &= inputs[i].validate();
    }
    return valid;
  }

    _albumArtistChanged(artist) {
      if (!!artist && !this.basicGenreName) {
        this.debounce('findBasicGenreByArtist', function() {
          let basicGenre = ss.BasicGenre.findByArtist(artist);
          if (!!basicGenre) this.basicGenreName = basicGenre.name;
        }, this.debounceTime);
      }
    }

    _artistChanged(artist) {
      if (!!artist && !this._editedSong.album.artist && !this._albumArtistCompilation && !this._editedSong.album.id) {
        this.debounce('setAlbumArtist', function() {
          this._editedSong.album.artist = artist;
          this.notifyPath('_editedSong.album.artist', artist);
        }, this.debounceTime);
      }
    }

    _changeCover() {
      this.$.coverFileDialog.click();
    }

    _changeSong() {
      this.$.songFileDialog.click();
    }

    _pathOfSong(filename) {
      return this._soulSifterSettings.getString('music.dir') + this.path.dirname(filename);
    }

  static get styles() {
    return [
      css`
        :host {
          font-size: 16px;
          display: none;
          position: absolute;
          top: 0;
          right: 0;
          bottom: 0;
          left: 0;
        }
        :host(.show) {
          display: block;
        }
        .fields {
          display: flex;
          flex-direction: column;
          justify-content: center;
          margin-left: 200px;
        }
        .genres {
          padding-left: 30px;
          padding-right: 60px;
          overflow-y: scroll;
          height: 440px;
        }



        paper-input {
          position: relative;
          width: 240px;
        }
        paper-input::shadow .label-is-floating label {
          text-align: right;
        }
        paper-dropdown-menu::shadow paper-input::shadow label {
          text-align: right;
        }

        paper-checkbox {
          margin: 10px 0;
        }

        #ratingContainer {
          position: relative;
          padding: 13px 0;
          width: 240px;
        }
        #ratingContainer .label {
          position: absolute;
          right: 260px;
          top: 15px;
        }
        .label {
          font-size: 0.75em;
        }
        .prev {
          font-size: 13px;
          margin-top: 8px;
          margin-bottom: -28px;
          text-align: right;
          color: #666;  /* TODO pull into theme */
        }
        .metadata {
          display: flex;
          flex-direction: row;
          position: absolute;
          align-content: flex-end;
          bottom: 0;
          right: 0;
          left: 0;
          font-size: 13px;
          color: #777777;  /* TODO put into theme */
        }
        .metadata div {
          padding: 0 20px;
          white-space: nowrap;
        }
        .audio {
          height: 24px;
          width: 100%;
          flex-grow: 10;
        }

        .cols {
          display: flex;
          flex-direction: row;
          justify-content: space-between;
        }
        .rows {
          display: flex;
          flex-direction: column;
        }
        #cover {
          background-position: center center;
          background-size: cover;
          background-color: #333;  /* TODO put into theme */
          height: 108px;
          width: 108px;
        }
      `,
    ];
  }
}

window.customElements.define('song-edit', SongEdit);
