import { dedupingMixin } from '@polymer/polymer/lib/utils/mixin.js';

let alertsMixin = (superClass) => class extends superClass {

  static get properties() {
    return {
      alerts: { type: Array }
    };
  }

  constructor() {
    super();
    this._alertsListener = (e) => this._alertsChanged(e);
    this.alerts = [];
  }

  connectedCallback() {
    super.connectedCallback();
    window.addEventListener('alerts-changed', this._alertsListener);
  }

  disconnectedCallback() {
    window.removeEventListener('alerts-changed', this._alertsListener);
    super.disconnectedCallback();
  }

  changeAlerts(x) {
    let event = new CustomEvent('alerts-changed', { detail: x });
    window.dispatchEvent(event);
  }

  _alertsChanged(e) {
    this.alertsChanged(e.detail);
  }

  alertsChanged(x) {
    this.alerts = x;
  }

  addAlert(a) {
    this.alerts.push(a);
    this.changeAlerts(this.alerts);
  }

  rmAlert() {
    this.alerts.shift();
    this.changeAlerts(this.alerts);
  }
}

export const AlertsMixin = dedupingMixin(alertsMixin);
