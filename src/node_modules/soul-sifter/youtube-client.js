const YoutubeClient = class {  // TODO show errors

  constructor() {
    let {google} = require('googleapis');
    this.google = google;
    this.tokenPath = (process.env.HOME || process.env.HOMEPATH || process.env.USERPROFILE)
        + '/Library/Application Support/Soul Sifter/.youtube-creds.json';

    // Authorize a client with the loaded credentials, then call the YouTube API.
    this.authorize(this.getChannel);
  }

  /**
   * Create an OAuth2 client with the given credentials, and then execute the
   * given callback function.
   *
   * @param {Object} credentials The authorization client credentials.
   * @param {function} callback The callback to call with the authorized client.
   */
  authorize(callback) {
    let fs = require('fs');
    let OAuth2 = this.google.auth.OAuth2;

    let settings = new ss.SoulSifterSettings();
    let clientId = settings.getString('google.clientId');
    let clientSecret = settings.getString('google.clientSecret');
    let redirectUrl = 'urn:ietf:wg:oauth:2.0:oob';
    this.oauth2Client = new OAuth2(clientId, clientSecret, redirectUrl);

    // Check if we have previously stored a token.
    fs.readFile(this.tokenPath, (err, token) => {
      if (err) {
        this.getNewToken(this.oauth2Client, callback);
      } else {
        this.oauth2Client.credentials = JSON.parse(token);
        callback(this.oauth2Client);
      }
    });
  }

  /**
   * Get and store new token after prompting for user authorization, and then
   * execute the given callback with the authorized OAuth2 client.
   *
   * @param {google.auth.OAuth2} oauth2Client The OAuth2 client to get token for.
   * @param {getEventsCallback} callback The callback to call with the authorized
   *     client.
   */
  getNewToken(oauth2Client, callback) {
    let readline = require('readline');
    let authUrl = oauth2Client.generateAuthUrl({
      access_type: 'offline',
      scope: ['https://www.googleapis.com/auth/youtube']
    });
    console.log('Authorize this app by visiting this url: ', authUrl);
  }

  saveNewToken(code) {
    this.oauth2Client.getToken(code, (err, token) => {
      if (err) {
        console.log('Error while trying to retrieve access token', err);
        return;
      }
      this.oauth2Client.credentials = token;
      this.storeToken(token);
      callback(oauth2Client);
    }); 
  }

  /**
   * Store token to disk be used in later program executions.
   *
   * @param {Object} token The token to store to disk.
   */
  storeToken(token) {
    let fs = require('fs');
    fs.writeFile(this.tokenPath, JSON.stringify(token), (err) => {
      if (err) throw err;
      console.log('Token stored to ' + this.tokenPath);
    });
  }

  /**
   * Add a new playlist, save the playlist id, and add the songs.
   */
  async createPlaylist(playlist) {
    let service = this.google.youtube('v3');
    service.playlists.insert({
      auth: this.oauth2Client,
      part: 'snippet,status',
      resource: {
        snippet: {
          title: playlist.name,
          description: "managed by SoulSifter"
        },
        status: {
          privacyStatus: "private"
        }
      }
    }, (err, response) => {
      if (err) {
        console.error('Unable to create playlist ' + playlist.name);
        console.error(err);
        return;
      }
      console.info('Successfully created playlist ' + playlist.name);
      playlist.youtubeId = response.data.id;
      playlist.update();
      // todo add songs
    });
  }
};

if (!window.yt) window.yt = new YoutubeClient();
