// <link href="../polymer/polymer.html" rel="import">

// <link href="../iron-flex-layout/iron-flex-layout.html" rel="import">
// <link href="../neon-animation/neon-animatable.html" rel="import">
// <link href="../neon-animation/neon-animated-pages.html" rel="import">
// <link href="../neon-animation/neon-animations.html" rel="import">
// <link href="../paper-drawer-panel/paper-drawer-panel.html" rel="import">
// <link href="../paper-header-panel/paper-header-panel.html" rel="import">
// <link href="../paper-tabs/paper-tab.html" rel="import">
// <link href="../paper-tabs/paper-tabs.html" rel="import">
// <link href="../paper-toast/paper-toast.html" rel="import">
// <link href="../paper-icon-button/paper-icon-button.html" rel="import">

// <link href="genre-edit.html" rel="import">
// <link href="genre-list.html" rel="import">
// <link href="playlist-edit.html" rel="import">
// <link href="playlist-list.html" rel="import">
// <link href="song-edit.html" rel="import">
// <link href="song-list.html" rel="import">
// <link href="song-section.html" rel="import">
// <link href="search-toolbar.html" rel="import">
// <link href="ss-settings.html" rel="import">

import { } from "@material/mwc-drawer";
import { } from "@material/mwc-tab";
import { } from "@material/mwc-tab-bar";
import { css, html, LitElement } from "@polymer/lit-element";

import { } from "./search-toolbar.js";
import { } from "./song-list.js";

class SoulSifter extends LitElement {
  render() {
    return html`
      <link id="theme" href="./theme-serato.css" rel="stylesheet">
      <style>
        :host {
          position: absolute;
          top: 0;
          right: 0;
          bottom: 0;
          left: 0;
          color: var(--primary-text-color);
          background-color: var(--primary-background-color);
          font-size: 13px;
        }
        #pageAnimatedPages {
          height: 100%;
        }
        #drawer {
          display: flex;
          flex-direction: column;
          background-color: var(--primary-background-color);
        }
        #drawer neon-animated-pages {
          flex: 1;
          overflow-y: scroll;
        }
        /* placed here since less preprocessor fails mixins. */
        paper-tab {
          --paper-tab: {
            background-color: var(--paper-tab-bg);
          };
          --paper-tab-content: {
            font-weight: 500 !important;
          };
        }


        /* remove preset colors */
    /*    :host /deep/ input {
          color: inherit;
        }
        :host /deep/ core-field {
          color: inherit;
        }
        :host /deep/ paper-toolbar {
          background-color: inherit;
          font-size: 1em;
        }
        :host /deep/ paper-input {
          color: inherit;
        }
    */

        paper-icon-button {
          position: absolute;
          display: none;
          width: 24px;
          height: 24px;
          font-size: 16px;
          margin: 8px;
        }

        paper-toast {
          left: auto;
          right: 20px;
        }

        .vertical {
          display: flex;
          flex-direction: column;
        }
        .flex {
          @apply --layout-flex;
        }

        section div {
          transition: transform 1s;
          transform: translate(-100%);
          background-image: linear-gradient(to top, #30cfd0 0%, #330867 100%);
        }

        section div.show {
          transform: translate(0%);
        }
      </style>
      <mwc-drawer>
        <section>
          <mwc-tab-bar activeIndex="1" dense="true">
            <mwc-tab @click="${this.songTabClicked}" label="Song" isFadingIndicator></mwc-tab>
            <mwc-tab @click="${this.genresTabClicked}" label="Genres" isFadingIndicator></mwc-tab>
            <mwc-tab @click="${this.playlistsTabClicked}" label="Playlists" isFadingIndicator></mwc-tab>
          </mwc-tab-bar>
          <section id="drawerSection">
            <div id="songSection">song-section</div>
            <div id="genresSection" class="show">genre-section</div>
            <div id="playlistsSection">playlist-section</div>
          </section>
        </section>
        <main slot="appContent">
          <search-toolbar></search-toolbar>
          <song-list></song-list>
        </main>
      </mwc-drawer>
    `;
  }

  static get properties() {
    return {
      selectedTab: { type: Number },
      prevSelectedTab: { type: Number },

      selectedPage: {
        type: Number,
        value: 0
      },
      pageEntryAnimation: String,
      pageExitAnimation: String,
      notifiedSongSection: {
        type: Boolean,
        value: false
      },
      genres: Array,
      songTrail: Array,
    };
  }

  constructor() {
    super();
    this.selectedTab = 1;
  }

  // https://github.com/PolymerElements/paper-scroll-header-panel/issues/33
  _selectedTabChanged(val, notified) {  // TODO
    if (!this.notifiedSongSection && val === 0) {
      this.$.songSection.setupHeaderSize();
      this.notifiedSongSection = true;
    }
  }

  attached() {  // TODO
    Polymer.RenderStatus.afterNextRender(this, function() {
      // setup page listeners
      var that = this;
      var mainEntry = 'slide-from-left-animation', mainExit = 'slide-left-animation';
      var subEntry = 'slide-from-right-animation', subExit = 'slide-right-animation';
      this.addEventListener('page-main', function(e) {
        that.pageEntryAnimation = mainEntry;
        that.pageExitAnimation = subExit;
        that.selectedPage = 0;
      });
      this.addEventListener('page-genre-edit', function(e) {
        that.pageEntryAnimation = subEntry;
        that.pageExitAnimation = mainExit;
        that.selectedPage = 1;
        that.genre = e.detail.genre;
      });
      this.addEventListener('page-playlist-edit', function(e) {
        that.pageEntryAnimation = subEntry;
        that.pageExitAnimation = mainExit;
        that.selectedPage = 2;
        that.playlist = e.detail.playlist;
      });
      this.addEventListener('page-song-edit', function(e) {
        that.pageEntryAnimation = subEntry;
        that.pageExitAnimation = mainExit;
        that.selectedPage = 3;
        if (e.detail.song) that.song = e.detail.song;
        if (e.detail.filepaths) that.newSongFilepaths = e.detail.filepaths;
      });
      this.addEventListener('page-settings', function(e) {
        that.pageEntryAnimation = subEntry;
        that.pageExitAnimation = mainExit;
        that.selectedPage = 4;
      });
      this.addEventListener('error-alert', function(e) {
        console.log(e.detail.msg);
        that.errorText = e.detail.msg;
        that.$.toast.show();
      });
    }.bind(this));
  }

  tabClicked(tab) {
    this.prevSelectedTab = this.selectedTab;
    this.selectedTab = tab;
    if (this.selectedTab != this.prevSelectedTab) {
      let drawer = this.shadowRoot.getElementById('drawerSection');
      drawer.children.item(this.prevSelectedTab).classList.toggle('show');
      drawer.children.item(this.selectedTab).classList.toggle('show');
    }
  }
  songTabClicked() {
    this.tabClicked(0);
  }
  genresTabClicked() {
    this.tabClicked(1);
  }
  playlistsTabClicked() {
    this.tabClicked(2);
  }

  updateGenres(e, detail, sender) {  // TODO
    this.genres = detail;
  }

  static get styles() {
    return [
      css`
        :root {
          background: var(--bg);
        }
        main {
          display: flex;
          flex-direction: column;
          height: 100%;
        }
        song-list {
          overflow-x: hidden;
        }
      `
    ];
  }
}

window.customElements.define('soul-sifter', SoulSifter);
