//
//  Playlist.h
//  soul-sifter
//
//  Created by Robby Neale
//  Generated by generate_model.rb
//

#ifndef __soul_sifter__Playlist__
#define __soul_sifter__Playlist__

#include <set>
#include <string>
#include <vector>

#include "Song.h"
#include "ResultSetIterator.h"

namespace sql {
    class ResultSet;
}

using namespace std;

namespace dogatech {
namespace soulsifter {

    class Playlist {
    public:
        Playlist();
        explicit Playlist(const Playlist& playlist);
        ~Playlist();
        void clear();

        static Playlist* findById(int id);
        static Playlist* findByName(const string& name);
        static ResultSetIterator<Playlist>* findAll();

        bool sync();
        int update();
        int save();

        const int getId() const;
        void setId(int id);
        const string& getName() const;
        void setName(const string& name);
        const string& getQuery() const;
        void setQuery(const string& query);
        const vector<Song*>& getSongs();
        void setSongs(const vector<Song*>& songs);
        void addSongById(int songId);
        void removeSongById(int songId);

        friend ResultSetIterator<Playlist>;

    private:
        int id;
        string name;
        string query;
        vector<Song*> songs;
        vector<int> songsIds;

        static void populateFields(const sql::ResultSet* rs, Playlist* playlist);
        static void populateSongsIds(Playlist* playlist);

        void operator=(const Playlist& playlist);
    };

}
}

#endif /* defined(__soul_sifter__Playlist__) */
