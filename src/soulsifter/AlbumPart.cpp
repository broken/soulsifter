//
//  AlbumPart.cpp
//  soul-sifter
//
//  Created by Robby Neale
//  Generated by generate_model.rb
//

#include "AlbumPart.h"

#include <cmath>
#include <string>
#include <sstream>

#include <boost/regex.hpp>
#include <boost/algorithm/string.hpp>

#include <cppconn/connection.h>
#include <cppconn/statement.h>
#include <cppconn/prepared_statement.h>
#include <cppconn/resultset.h>
#include <cppconn/exception.h>
#include <cppconn/warning.h>

#include "MysqlAccess.h"
#include "DTVectorUtil.h"
#include "Album.h"

using namespace std;

namespace dogatech {
namespace soulsifter {

# pragma mark initialization

    AlbumPart::AlbumPart() :
    id(0),
    pos(),
    name(),
    albumId(0),
    album(NULL) {
    }

    AlbumPart::AlbumPart(const AlbumPart& albumPart) :
    id(albumPart.getId()),
    pos(albumPart.getPos()),
    name(albumPart.getName()),
    albumId(albumPart.getAlbumId()),
    album(NULL) {
        if (albumPart.getAlbum()) setAlbum(*albumPart.getAlbum());
    }

    void AlbumPart::operator=(const AlbumPart& albumPart) {
        id = albumPart.getId();
        pos = albumPart.getPos();
        name = albumPart.getName();
        albumId = albumPart.getAlbumId();
        album = NULL;
    }

    AlbumPart::~AlbumPart() {
        delete album;
        album = NULL;
    }

    void AlbumPart::clear() {
        id = 0;
        pos.clear();
        name.clear();
        albumId = 0;
        delete album;
        album = NULL;
    }

# pragma mark static methods

    void AlbumPart::populateFields(const sql::ResultSet* rs, AlbumPart* albumPart) {
        albumPart->setId(rs->getInt("id"));
        albumPart->setPos(rs->getString("pos"));
        albumPart->setName(rs->getString("name"));
        albumPart->setAlbumId(rs->getInt("albumId"));
    }

    AlbumPart* AlbumPart::findById(int id) {
        try {
            sql::PreparedStatement *ps = MysqlAccess::getInstance().getPreparedStatement("select AlbumParts.* from AlbumParts where AlbumParts.id = ?");
            ps->setInt(1, id);
            sql::ResultSet *rs = ps->executeQuery();
            AlbumPart *albumPart = NULL;
            if (rs->next()) {
                albumPart = new AlbumPart();
                populateFields(rs, albumPart);
            }
            rs->close();
            delete rs;

            return albumPart;
        } catch (sql::SQLException &e) {
            cerr << "ERROR: SQLException in " << __FILE__;
            cerr << " (" << __func__<< ") on line " << __LINE__ << endl;
            cerr << "ERROR: " << e.what();
            cerr << " (MySQL error code: " << e.getErrorCode();
            cerr << ", SQLState: " << e.getSQLState() << ")" << endl;
            exit(1);
        }
    }

    AlbumPart* AlbumPart::findByPosAndAlbumId(const string& pos, int albumId) {
        try {
            sql::PreparedStatement *ps = MysqlAccess::getInstance().getPreparedStatement("select AlbumParts.* from AlbumParts where pos = ? and albumId = ?");
            ps->setString(1, pos);
            ps->setInt(2, albumId);
            sql::ResultSet *rs = ps->executeQuery();
            AlbumPart *albumPart = NULL;
            if (rs->next()) {
                albumPart = new AlbumPart();
                populateFields(rs, albumPart);
            }
            rs->close();
            delete rs;

            return albumPart;
        } catch (sql::SQLException &e) {
            cerr << "ERROR: SQLException in " << __FILE__;
            cerr << " (" << __func__<< ") on line " << __LINE__ << endl;
            cerr << "ERROR: " << e.what();
            cerr << " (MySQL error code: " << e.getErrorCode();
            cerr << ", SQLState: " << e.getSQLState() << ")" << endl;
            exit(1);
        }
    }

    ResultSetIterator<AlbumPart>* AlbumPart::findAll() {
        sql::PreparedStatement *ps = MysqlAccess::getInstance().getPreparedStatement("select AlbumParts.* from AlbumParts");
        sql::ResultSet *rs = ps->executeQuery();
        ResultSetIterator<AlbumPart> *dtrs = new ResultSetIterator<AlbumPart>(rs);
        return dtrs;
    }

# pragma mark persistence

    int AlbumPart::update() {
        try {
            if (album && album->sync()) {
                if (album->getId()) {
                    album->update();
                } else {
                    album->save();
                }
                albumId = album->getId();
            } else if (!albumId && album) {
                albumId = album->getId();
            }

            sql::PreparedStatement *ps = MysqlAccess::getInstance().getPreparedStatement("update AlbumParts set pos=?, name=?, albumId=? where id=?");
            if (!pos.empty()) ps->setString(1, pos);
            else ps->setNull(1, sql::DataType::VARCHAR);
            if (!name.empty()) ps->setString(2, name);
            else ps->setNull(2, sql::DataType::VARCHAR);
            if (albumId > 0) ps->setInt(3, albumId);
            else ps->setNull(3, sql::DataType::INTEGER);
            ps->setInt(4, id);
            int result = ps->executeUpdate();
            return result;
        } catch (sql::SQLException &e) {
            cerr << "ERROR: SQLException in " << __FILE__;
            cerr << " (" << __func__<< ") on line " << __LINE__ << endl;
            cerr << "ERROR: " << e.what();
            cerr << " (MySQL error code: " << e.getErrorCode();
            cerr << ", SQLState: " << e.getSQLState() << ")" << endl;
            exit(1);
        }
    }

    int AlbumPart::save() {
        try {
            if (album && album->sync()) {
                if (album->getId()) {
                    album->update();
                } else {
                    album->save();
                }
                albumId = album->getId();
            } else if (!albumId && album) {
                albumId = album->getId();
            }

            sql::PreparedStatement *ps = MysqlAccess::getInstance().getPreparedStatement("insert into AlbumParts (pos, name, albumId) values (?, ?, ?)");
            if (!pos.empty()) ps->setString(1, pos);
            else ps->setNull(1, sql::DataType::VARCHAR);
            if (!name.empty()) ps->setString(2, name);
            else ps->setNull(2, sql::DataType::VARCHAR);
            if (albumId > 0) ps->setInt(3, albumId);
            else ps->setNull(3, sql::DataType::INTEGER);
            int saved = ps->executeUpdate();
            if (!saved) {
                cerr << "Not able to save albumPart" << endl;
                return saved;
            } else {
                id = MysqlAccess::getInstance().getLastInsertId();
                if (id == 0) {
                    cerr << "Inserted albumPart, but unable to retreive inserted ID." << endl;
                    return saved;
                }
                return saved;
            }
        } catch (sql::SQLException &e) {
            cerr << "ERROR: SQLException in " << __FILE__;
            cerr << " (" << __func__<< ") on line " << __LINE__ << endl;
            cerr << "ERROR: " << e.what();
            cerr << " (MySQL error code: " << e.getErrorCode();
            cerr << ", SQLState: " << e.getSQLState() << ")" << endl;
            exit(1);
        }
    }

    bool AlbumPart::sync() {
        AlbumPart* albumPart = findById(id);
        if (!albumPart) albumPart = findByPosAndAlbumId(pos, albumId);
        if (!albumPart) {
            if (!albumId && album) {
                album->sync();
                albumId = album->getId();
            }
            return true;
        }

        // check fields
        bool needsUpdate = false;
        boost::regex decimal("(-?\\d+)\\.?\\d*");
        boost::smatch match1;
        boost::smatch match2;
        if (id != albumPart->getId()) {
            if (id) {
                cout << "updating albumPart " << id << " id from " << albumPart->getId() << " to " << id << endl;
                needsUpdate = true;
            } else {
                id = albumPart->getId();
            }
        }
        if (pos.compare(albumPart->getPos())  && (!boost::regex_match(pos, match1, decimal) || !boost::regex_match(albumPart->getPos(), match2, decimal) || match1[1].str().compare(match2[1].str()))) {
            if (!pos.empty()) {
                cout << "updating albumPart " << id << " pos from " << albumPart->getPos() << " to " << pos << endl;
                needsUpdate = true;
            } else {
                pos = albumPart->getPos();
            }
        }
        if (name.compare(albumPart->getName())  && (!boost::regex_match(name, match1, decimal) || !boost::regex_match(albumPart->getName(), match2, decimal) || match1[1].str().compare(match2[1].str()))) {
            if (!name.empty()) {
                cout << "updating albumPart " << id << " name from " << albumPart->getName() << " to " << name << endl;
                needsUpdate = true;
            } else {
                name = albumPart->getName();
            }
        }
        if (albumId != albumPart->getAlbumId()) {
            if (albumId) {
                cout << "updating albumPart " << id << " albumId from " << albumPart->getAlbumId() << " to " << albumId << endl;
                needsUpdate = true;
            } else {
                albumId = albumPart->getAlbumId();
            }
        }
        if (album) needsUpdate |= album->sync();
        return needsUpdate;
    }


# pragma mark accessors

    const int AlbumPart::getId() const { return id; }
    void AlbumPart::setId(const int id) { this->id = id; }

    const string& AlbumPart::getPos() const { return pos; }
    void AlbumPart::setPos(const string& pos) { this->pos = pos; }

    const string& AlbumPart::getName() const { return name; }
    void AlbumPart::setName(const string& name) { this->name = name; }

    const int AlbumPart::getAlbumId() const { return albumId; }
    void AlbumPart::setAlbumId(const int albumId) {
        this->albumId = albumId;
        delete album;
        album = NULL;
    }

    Album* AlbumPart::getAlbum() const {
        if (!album && albumId)
            return Album::findById(albumId);
        return album;
    }
    void AlbumPart::setAlbum(const Album& album) {
        this->albumId = album.getId();
        delete this->album;
        this->album = new Album(album);
    }
    void AlbumPart::setAlbum(Album* album) {
        this->albumId = album->getId();
        delete this->album;
        this->album = album;
    }

}
}
