//
//  PlaylistEntry.cpp
//  soul-sifter
//
//  Created by Robby Neale
//  Generated by generate_model.rb
//

#include "PlaylistEntry.h"

#include <cmath>
#include <string>

#include <boost/regex.hpp>
#include <boost/algorithm/string.hpp>

#include <cppconn/connection.h>
#include <cppconn/statement.h>
#include <cppconn/prepared_statement.h>
#include <cppconn/resultset.h>
#include <cppconn/exception.h>
#include <cppconn/warning.h>

#include "MysqlAccess.h"
#include "DTVectorUtil.h"

using namespace std;

namespace dogatech {
namespace soulsifter {

# pragma mark initialization

    PlaylistEntry::PlaylistEntry() :
    id(0),
    playlistId(0),
    playlist(NULL),
    songId(0),
    song(NULL),
    position(0),
    time() {
    }

    PlaylistEntry::PlaylistEntry(const PlaylistEntry& playlistEntry) :
    id(playlistEntry.getId()),
    playlistId(playlistEntry.getPlaylistId()),
    playlist(NULL),
    songId(playlistEntry.getSongId()),
    song(NULL),
    position(playlistEntry.getPosition()),
    time(playlistEntry.getTime()) {
        if (playlistEntry.getPlaylist()) setPlaylist(*playlistEntry.getPlaylist());
        if (playlistEntry.getSong()) setSong(*playlistEntry.getSong());
    }

    void PlaylistEntry::operator=(const PlaylistEntry& playlistEntry) {
        id = playlistEntry.getId();
        playlistId = playlistEntry.getPlaylistId();
        playlist = NULL;
        songId = playlistEntry.getSongId();
        song = NULL;
        position = playlistEntry.getPosition();
        time = playlistEntry.getTime();
    }

    PlaylistEntry::~PlaylistEntry() {
        delete playlist;
        playlist = NULL;
        delete song;
        song = NULL;
    }

    void PlaylistEntry::clear() {
        id = 0;
        playlistId = 0;
        delete playlist;
        playlist = NULL;
        songId = 0;
        delete song;
        song = NULL;
        position = 0;
        time.clear();
    }

# pragma mark static methods

    void PlaylistEntry::populateFields(const sql::ResultSet* rs, PlaylistEntry* playlistEntry) {
        playlistEntry->setId(rs->getInt("id"));
        playlistEntry->setPlaylistId(rs->getInt("playlistId"));
        playlistEntry->setSongId(rs->getInt("songId"));
        playlistEntry->setPosition(rs->getInt("position"));
        playlistEntry->setTime(rs->getString("time"));
    }

    PlaylistEntry* PlaylistEntry::findById(int id) {
        try {
            sql::PreparedStatement *ps = MysqlAccess::getInstance().getPreparedStatement("select * from PlaylistEntries where id = ?");
            ps->setInt(1, id);
            sql::ResultSet *rs = ps->executeQuery();
            PlaylistEntry *playlistEntry = NULL;
            if (rs->next()) {
                playlistEntry = new PlaylistEntry();
                populateFields(rs, playlistEntry);
            }
            rs->close();
            delete rs;

            return playlistEntry;
        } catch (sql::SQLException &e) {
            cerr << "ERROR: SQLException in " << __FILE__;
            cerr << " (" << __func__<< ") on line " << __LINE__ << endl;
            cerr << "ERROR: " << e.what();
            cerr << " (MySQL error code: " << e.getErrorCode();
            cerr << ", SQLState: " << e.getSQLState() << ")" << endl;
            exit(1);
        }
    }

    PlaylistEntry* PlaylistEntry::findByPlaylistIdAndSongId(int playlistId, int songId) {
        try {
            sql::PreparedStatement *ps = MysqlAccess::getInstance().getPreparedStatement("select * from PlaylistEntries where playlistId = ? and songId = ?");
            ps->setInt(1, playlistId);
            ps->setInt(2, songId);
            sql::ResultSet *rs = ps->executeQuery();
            PlaylistEntry *playlistEntry = NULL;
            if (rs->next()) {
                playlistEntry = new PlaylistEntry();
                populateFields(rs, playlistEntry);
            }
            rs->close();
            delete rs;

            return playlistEntry;
        } catch (sql::SQLException &e) {
            cerr << "ERROR: SQLException in " << __FILE__;
            cerr << " (" << __func__<< ") on line " << __LINE__ << endl;
            cerr << "ERROR: " << e.what();
            cerr << " (MySQL error code: " << e.getErrorCode();
            cerr << ", SQLState: " << e.getSQLState() << ")" << endl;
            exit(1);
        }
    }

    ResultSetIterator<PlaylistEntry>* PlaylistEntry::findAll() {
        sql::PreparedStatement *ps = MysqlAccess::getInstance().getPreparedStatement("select * from PlaylistEntries");
        sql::ResultSet *rs = ps->executeQuery();
        ResultSetIterator<PlaylistEntry> *dtrs = new ResultSetIterator<PlaylistEntry>(rs);
        return dtrs;
    }

# pragma mark persistence

    bool PlaylistEntry::sync() {
        PlaylistEntry* playlistEntry = findById(id);
        if (!playlistEntry) playlistEntry = findByPlaylistIdAndSongId(playlistId, songId);
        if (!playlistEntry) {
            return true;
        }

        // check fields
        bool needsUpdate = false;
        boost::regex decimal("(-?\\d+)\\.?\\d*");
        boost::smatch match1;
        boost::smatch match2;
        if (id != playlistEntry->getId()) {
            if (id) {
                cout << "updating playlistEntry " << id << " id from " << playlistEntry->getId() << " to " << id << endl;
                needsUpdate = true;
            } else {
                id = playlistEntry->getId();
            }
        }
        if (playlistId != playlistEntry->getPlaylistId()) {
            if (playlistId) {
                cout << "updating playlistEntry " << id << " playlistId from " << playlistEntry->getPlaylistId() << " to " << playlistId << endl;
                needsUpdate = true;
            } else {
                playlistId = playlistEntry->getPlaylistId();
            }
        }
        if (playlist) needsUpdate |= playlist->sync();
        if (songId != playlistEntry->getSongId()) {
            if (songId) {
                cout << "updating playlistEntry " << id << " songId from " << playlistEntry->getSongId() << " to " << songId << endl;
                needsUpdate = true;
            } else {
                songId = playlistEntry->getSongId();
            }
        }
        if (song) needsUpdate |= song->sync();
        if (position != playlistEntry->getPosition()) {
            if (position) {
                cout << "updating playlistEntry " << id << " position from " << playlistEntry->getPosition() << " to " << position << endl;
                needsUpdate = true;
            } else {
                position = playlistEntry->getPosition();
            }
        }
        if (time.compare(playlistEntry->getTime())  && (!boost::regex_match(time, match1, decimal) || !boost::regex_match(playlistEntry->getTime(), match2, decimal) || match1[1].str().compare(match2[1].str()))) {
            if (!time.empty()) {
                cout << "updating playlistEntry " << id << " time from " << playlistEntry->getTime() << " to " << time << endl;
                needsUpdate = true;
            } else {
                time = playlistEntry->getTime();
            }
        }
        return needsUpdate;
    }

    int PlaylistEntry::update() {
        try {
            if (playlist && playlist->sync()) {
                playlist->update();
            }
            if (song && song->sync()) {
                song->update();
            }
            sql::PreparedStatement *ps = MysqlAccess::getInstance().getPreparedStatement("update PlaylistEntries set playlistId=?, songId=?, position=?, time=? where id=?");
            ps->setInt(1, playlistId);
            ps->setInt(2, songId);
            ps->setInt(3, position);
            ps->setString(4, time);
            ps->setInt(5, id);
            int result = ps->executeUpdate();
            return result;
        } catch (sql::SQLException &e) {
            cerr << "ERROR: SQLException in " << __FILE__;
            cerr << " (" << __func__<< ") on line " << __LINE__ << endl;
            cerr << "ERROR: " << e.what();
            cerr << " (MySQL error code: " << e.getErrorCode();
            cerr << ", SQLState: " << e.getSQLState() << ")" << endl;
            exit(1);
        }
    }

    int PlaylistEntry::save() {
        try {
            if (playlist && (!playlist->getId() || !Playlist::findById(playlist->getId()))) {
                if (playlist->save()) {
                    if (playlist->getId()) {
                        playlistId = playlist->getId();
                    } else {
                        playlistId = MysqlAccess::getInstance().getLastInsertId();
                        playlist->setId(playlistId);
                    }
                } else {
                    cerr << "Unable to save playlist" << endl;
                }
            }
            if (song && (!song->getId() || !Song::findById(song->getId()))) {
                if (song->save()) {
                    if (song->getId()) {
                        songId = song->getId();
                    } else {
                        songId = MysqlAccess::getInstance().getLastInsertId();
                        song->setId(songId);
                    }
                } else {
                    cerr << "Unable to save song" << endl;
                }
            }
            sql::PreparedStatement *ps = MysqlAccess::getInstance().getPreparedStatement("insert into PlaylistEntries (playlistId, songId, position, time) values (?, ?, ?, ?)");
            ps->setInt(1, playlistId);
            ps->setInt(2, songId);
            ps->setInt(3, position);
            ps->setString(4, time);
            int saved = ps->executeUpdate();
            if (!saved) {
                cerr << "Not able to save playlistEntry" << endl;
                return saved;
            } else {
                id = MysqlAccess::getInstance().getLastInsertId();
                if (id == 0) {
                    cerr << "Inserted playlistEntry, but unable to retreive inserted ID." << endl;
                    return saved;
                }
                return saved;
            }
        } catch (sql::SQLException &e) {
            cerr << "ERROR: SQLException in " << __FILE__;
            cerr << " (" << __func__<< ") on line " << __LINE__ << endl;
            cerr << "ERROR: " << e.what();
            cerr << " (MySQL error code: " << e.getErrorCode();
            cerr << ", SQLState: " << e.getSQLState() << ")" << endl;
            exit(1);
        }
    }


# pragma mark accessors

    const int PlaylistEntry::getId() const { return id; }
    void PlaylistEntry::setId(const int id) { this->id = id; }

    const int PlaylistEntry::getPlaylistId() const { return playlistId; }
    void PlaylistEntry::setPlaylistId(const int playlistId) {
        this->playlistId = playlistId;
        delete playlist;
        playlist = NULL;
    }

    Playlist* PlaylistEntry::getPlaylist() const {
        if (!playlist && playlistId)
            return Playlist::findById(playlistId);
        return playlist;
    }
    void PlaylistEntry::setPlaylist(const Playlist& playlist) {
        this->playlistId = playlist.getId();
        delete this->playlist;
        this->playlist = new Playlist(playlist);
    }
    void PlaylistEntry::setPlaylist(Playlist* playlist) {
        this->playlistId = playlist->getId();
        delete this->playlist;
        this->playlist = playlist;
    }

    const int PlaylistEntry::getSongId() const { return songId; }
    void PlaylistEntry::setSongId(const int songId) {
        this->songId = songId;
        delete song;
        song = NULL;
    }

    Song* PlaylistEntry::getSong() const {
        if (!song && songId)
            return Song::findById(songId);
        return song;
    }
    void PlaylistEntry::setSong(const Song& song) {
        this->songId = song.getId();
        delete this->song;
        this->song = new Song(song);
    }
    void PlaylistEntry::setSong(Song* song) {
        this->songId = song->getId();
        delete this->song;
        this->song = song;
    }

    const int PlaylistEntry::getPosition() const { return position; }
    void PlaylistEntry::setPosition(const int position) { this->position = position; }

    const string& PlaylistEntry::getTime() const { return time; }
    void PlaylistEntry::setTime(const string& time) { this->time = time; }

}
}
